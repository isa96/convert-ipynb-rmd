source('assets/converter.R')
to_Rmd()
source('assets/converter.R')
to_Rmd()
to_Rmd()
source('assets/converter.R')
source('assets/converter.R')
to_Rmd()
source('assets/converter.R')
source('assets/converter.R')
to_Rmd()
source('assets/converter.R')
to_Rmd()
source('assets/converter.R')
source('assets/converter.R')
source('assets/converter.R')
source('assets/converter.R')
source('assets/converter.R')
to_Rmd()
source('assets/converter.R')
knitr::opts_chunk$set(echo = TRUE)
options(scipen = 99)
1/6
data.frame(X = 1:6, Probability = 1/6)
knitr::opts_chunk$set(echo = TRUE)
retail <- read.csv("datainput/retail.csv")
str(retail)
mean(retail$Profit)
retail$Profit > mean(retail$Profit) & retail$Quantity < 5
retail[retail$Profit > mean(retail$Profit) & retail$Quantity < 5]
retail[retail$Profit > mean(retail$Profit) & retail$Quantity < 5,]
table(retail$Ship.Mode)
table(retail$Ship.Mode, retail$Segment)
retail[retail$Sub.Category == "Office",]
retail[retail$Sub.Category == "Office Supplies",]
retail[retail$Category == "Office Supplies",]
table(retail[retail$Category == "Office Supplies",])
table(retail[retail$Category == "Office Supplies",]$Sub.Category)
retail_office <- retail[retail$Category == "Office Supplies",]
aggregate(Quantity ~ Sub.Category, data = retail_office, FUN = sum)
q3[order(q3),]
retail_office <- retail[retail$Category == "Office Supplies",]
q3 <- aggregate(Quantity ~ Sub.Category, data = retail_office, FUN = sum)
q3[order(q3),]
retail_office <- retail[retail$Category == "Office Supplies",]
q3 <- aggregate(Quantity ~ Sub.Category, data = retail_office, FUN = sum)
q3[sort(q3),]
retail_office <- retail[retail$Category == "Office Supplies",]
q3 <- aggregate(Quantity ~ Sub.Category, data = retail_office, FUN = sum)
q3[order(q3$Quantity),]
retail_office <- retail[retail$Category == "Office Supplies",]
q3 <- aggregate(Quantity ~ Sub.Category, data = retail_office, FUN = sum)
q3[-order(q3$Quantity),]
retail_office <- retail[retail$Category == "Office Supplies",]
q3 <- aggregate(Quantity ~ Sub.Category, data = retail_office, FUN = sum)
q3[order(-q3$Quantity),]
cor(retail$Sales, retail$Profit)
pnorm(81777, mu = 47858.35, sd = 25195)
pnorm(81777, miu = 47858.35, sd = 25195)
pnorm(81777, mean = 47858.35, sd = 25195)
pnorm(81777, mean = 47858.35, sd = 25195, lower.tail = F)
source('assets/converter.R')
to_Rmd()
devtools::install_github("rstudio/reticulate")
install.packages("devtools")
devtools::install_github("rstudio/reticulate")
install.packages("Rtools")
writeLines('PATH="C:\\rtools40\\usr\\bin"', con = "~/.Renviron")
Sys.which("make")
install.packages("devtools")
devtools::install_github("rstudio/reticulate")
update.packages(ask=FALSE, checkBuilt=TRUE)
devtools::install_github("rstudio/reticulate")
install.packages("stats")
source('assets/converter.R')
to_Rmd()
sessionInfo()
sessionInfo()
source('assets/converter.R')
to_Rmd()
library(reticulate)
Sys.which("python")
conda_list()
conda_list()[[1]][1]
conda_list()[[1]][6]
install.packages("coronavirus")
devtools::install_github("RamiKrispin/coronavirus")
install.packages("coronavirus")
knitr::opts_chunk$set(echo = TRUE)
library(coronavirus)
update_dataset()
rm(list = ls())
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
library(mypackage)
install.packages("mypackage")
library(mypackage)
install.packages("reticulate")
library(reticulate)
library(reticulate)
Sys.setenv(RETICULATE_PYTHON = "C:/Users/litaimut/anaconda3/python.exe")
py_run_string("import os")
py_run_string("os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = 'C:/Users/litaimut/anaconda3/Library/plugins/platforms'")
rm(list = ls())
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
library(reticulate)
Sys.setenv(RETICULATE_PYTHON = "C:/Users/litaimut/anaconda3/python.exe")
py_run_string("import os")
py_run_string("os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = 'C:/Users/litaimut/anaconda3/Library/plugins/platforms'")
import pandas as pd
rm(list = ls())
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
library(reticulate)
Sys.setenv(RETICULATE_PYTHON = "C:/Users/litaimut/anaconda3/python.exe")
py_run_string("import os")
py_run_string("os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = 'C:/Users/litaimut/anaconda3/Library/plugins/platforms'")
user = str(input("Enter the user id to whom you want to recommend : "))
already_rated, predictions = recommend_product(preds_df, user, data,5)
rm(list = ls())
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
library(reticulate)
Sys.setenv(RETICULATE_PYTHON = "C:/Users/litaimut/anaconda3/python.exe")
py_run_string("import os")
py_run_string("os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = 'C:/Users/litaimut/anaconda3/Library/plugins/platforms'")
user = str(input("Enter the user id to whom you want to recommend : "))
already_rated, predictions = recommend_product(preds_df, user, data,5)
rm(list = ls())
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
library(reticulate)
Sys.setenv(RETICULATE_PYTHON = "C:/Users/litaimut/anaconda3/python.exe")
py_run_string("import os")
py_run_string("os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = 'C:/Users/litaimut/anaconda3/Library/plugins/platforms'")
rm(list = ls())
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
library(reticulate)
Sys.setenv(RETICULATE_PYTHON = "C:/Users/litaimut/anaconda3/python.exe")
py_run_string("import os")
py_run_string("os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = 'C:/Users/litaimut/anaconda3/Library/plugins/platforms'")
user = str(input("Enter the user id to whom you want to recommend : "))
already_rated, predictions = recommend_product(preds_df, user, data,5)
rm(list = ls())
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
library(reticulate)
Sys.setenv(RETICULATE_PYTHON = "C:/Users/litaimut/anaconda3/python.exe")
py_run_string("import os")
py_run_string("os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = 'C:/Users/litaimut/anaconda3/Library/plugins/platforms'")
rm(list = ls())
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
library(reticulate)
Sys.setenv(RETICULATE_PYTHON = "C:/Users/litaimut/anaconda3/python.exe")
py_run_string("import os")
py_run_string("os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = 'C:/Users/litaimut/anaconda3/Library/plugins/platforms'")
Sys.setenv(RETICULATE_PYTHON = "C:/Users/dyahn/anaconda3/envs/dataanalytics/python.exe")
library(reticulate)
py_run_string("import os")
py_run_string("os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = 'C:/Users/dyahn/anaconda3/Library/plugins/platforms'")
os$listdir(".")
library(reticulate)
os <- import("os")
os$listdir(".")
import pandas
Sys.setenv(RETICULATE_PYTHON = "C:/Users/dyahn/anaconda3/envs/dataanalytics/python.exe")
library(reticulate)
py_run_string("import os")
py_run_string("os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = 'C:/Users/dyahn/anaconda3/Library/plugins/platforms'")
py_install("pandas")
py_install("numpy")
py_install("seaborn")
py_install("matplotlib")
rm(list = ls())
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
Sys.setenv(RETICULATE_PYTHON = "C:/Users/dyahn/anaconda3/envs/dataanalytics/python.exe")
library(reticulate)
py_run_string("import os")
py_run_string("os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = 'C:/Users/dyahn/anaconda3/Library/plugins/platforms'")
#py_install("matplotlib")
rm(list = ls())
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
library(reticulate)
os <- import("os")
os$listdir(".")
Sys.setenv(RETICULATE_PYTHON = "C:/Users/dyahn/anaconda3/envs/dataanalytics/python.exe")
library(reticulate)
py_run_string("import os")
py_run_string("os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = 'C:/Users/dyahn/anaconda3/Library/plugins/platforms'")
#py_install("matplotlib")
reticulate::py_config()
reticulate::py_config()
rm(list = ls())
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
library(reticulate)
os <- import("os")
y
os$listdir(".")
library(reticulate)
Sys.setenv(RETICULATE_PYTHON = "C:/Users/dyahn/anaconda3/envs/dataanalytics/python.exe")
library(reticulate)
py_run_string("import os")
py_run_string("os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = 'C:/Users/dyahn/anaconda3/Library/plugins/platforms'")
py_install("pandas")
py_install("scipy")
py_install("matplotlib")
py_install("seaborn")
Sys.setenv(RETICULATE_PYTHON = "C:/Users/dyahn/anaconda3/envs/dataanalytics/python.exe")
library(reticulate)
py_run_string("import os")
# py_run_string("os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = 'C:/Users/dyahn/anaconda3/Library/plugins/platforms'")
remotes::install_github("rstudio/reticulate")
install.packages("remotes")
rm(list = ls())
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
Sys.setenv(RETICULATE_PYTHON = "C:/Users/dyahn/anaconda3/envs/dataanalytics/python.exe")
library(reticulate)
py_run_string("import os")
py_run_string("os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = 'C:/Users/dyahn/anaconda3/Library/plugins/platforms'")
sessionInfo()
library(reticulate)
use_python("/usr/bin/python")
Sys.setenv(RETICULATE_PYTHON = "C:/Users/dyahn/anaconda3/envs/dataanalytics/python.exe")
library(reticulate)
py_run_string("import os")
# py_run_string("os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = 'C:/Users/dyahn/anaconda3/Library/plugins/platforms'")
Sys.setenv(RETICULATE_PYTHON = "C:/Users/dyahn/anaconda3/envs/dataanalytics/python.exe")
library(reticulate)
py_run_string("import os")
# py_run_string("os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = 'C:/Users/dyahn/anaconda3/Library/plugins/platforms'")
# Sys.setenv(RETICULATE_PYTHON = "C:/Users/dyahn/anaconda3/envs/dataanalytics/python.exe")
library(reticulate)
use_python("C:/Users/dyahn/anaconda3/envs/dataanalytics/python.exe",required=TRUE)
#py_run_string("import os")
# py_run_string("os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = 'C:/Users/dyahn/anaconda3/Library/plugins/platforms'")
# Sys.setenv(RETICULATE_PYTHON = "C:/Users/dyahn/anaconda3/envs/dataanalytics/python.exe")
library(reticulate)
use_python("C:/Users/dyahn/anaconda3/envs/dataanalytics/python.exe",required=TRUE)
#py_run_string("import os")
# py_run_string("os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = 'C:/Users/dyahn/anaconda3/Library/plugins/platforms'")
import pandas as pd
import pandas as pd
# Sys.setenv(RETICULATE_PYTHON = "C:/Users/dyahn/anaconda3/envs/dataanalytics/python.exe")
library(reticulate)
use_python("C:/Users/dyahn/anaconda3/envs/dataanalytics/python.exe",required=TRUE)
#py_run_string("import os")
# py_run_string("os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = 'C:/Users/dyahn/anaconda3/Library/plugins/platforms'")
# Sys.setenv(RETICULATE_PYTHON = "C:/Users/dyahn/anaconda3/envs/dataanalytics/python.exe")
library(reticulate)
use_python("C:/Users/dyahn/anaconda3/python.exe",required=TRUE)
# Sys.setenv(RETICULATE_PYTHON = "C:/Users/dyahn/anaconda3/envs/dataanalytics/python.exe")
library(reticulate)
use_python("C:/Users/dyahn/anaconda3/envs/dataanalytics/python.exe",required=TRUE)
#py_run_string("import os")
# py_run_string("os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = 'C:/Users/dyahn/anaconda3/Library/plugins/platforms'")
# Sys.setenv(RETICULATE_PYTHON = "C:/Users/dyahn/anaconda3/envs/dataanalytics/python.exe")
library(reticulate)
use_python("C:/Users/dyahn/anaconda3/envs/blog-algo/python.exe",
required=TRUE)
#py_run_string("import os")
# py_run_string("os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = 'C:/Users/dyahn/anaconda3/Library/plugins/platforms'")
Sys.setenv(RETICULATE_PYTHON = "C:/Users/dyahn/anaconda3/envs/dataanalytics/python.exe")
library(reticulate)
# use_python("C:/Users/dyahn/anaconda3/envs/blog-algo/python.exe",
#            required=TRUE)
py_run_string("import os")
py_run_string("os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = 'C:/Users/dyahn/anaconda3/Library/plugins/platforms'")
# ipynb convert -----------------------------------------------------------
convert_ipynb <- function(input, output = xfun::with_ext(input, 'Rmd')){
json <- jsonlite::fromJSON(input, simplifyDataFrame = FALSE)
lang <- json$metadata$kernelspec$language
res <- character()
for (cell in json$cells) {
if (length(src <- unlist(cell$source)) == 0) next  # empty cell
src <- gsub('\n$', '', src)
src <- switch(
cell$cell_type,
code = cell_chunk(src, lang, cell$metadata),
raw  = cell_raw(src, cell$metadata$format),
src
)
res <- c(res, src, '')
}
# title <- gsub("\\.ipynb$|[[:digit:]]+.","",input)
# title <- gsub("\\_"," ",title)
#
# res <- c(paste0('# ',title,'\n'), res)
xfun::write_utf8(res, output)
invisible(output)
}
# convert an ipynb cell to an Rmd chunk
cell_chunk <- function(x, lang, meta = list()) {
if (length(x) == 0) return()
# warn against line magics
if (length(i <- grep(r_line_magics, x)) > 0) warning(
'Detected the following probable line magics. They do not work in R Markdown.\n\n',
paste(' ', x[i], collapse = '\n'), call. = FALSE
)
# replace cell magics with knitr language engines
if (grepl(r <- '^%%([[:alnum:]]+)\\s*$', x[1])) {
lang <- gsub(r, '\\1', x[1]); x <- x[-1]
}
if (lang == 'markdown') return(x)
opts <- c('', meta$name)  # cell name (if defined) to chunk label
meta <- meta$jupyter  # convert some jupyter cell metadata to chunk options
opts <- c(
opts, if (isTRUE(meta$source_hidden)) 'echo=FALSE',
if (isTRUE(meta$outputs_hidden)) 'results="hide"'
)
c(sprintf('```{%s%s}', adjust_lang(lang), paste(opts, collapse = ', ')), x, '```')
}
line_magics <- c(
'alias', 'alias_magic', 'autoawait', 'autocall', 'automagic',
'autosave', 'bookmark', 'cat', 'cd', 'clear', 'colors', 'conda',
'config', 'connect_info', 'cp', 'debug', 'dhist', 'dirs', 'doctest_mode',
'ed', 'edit', 'env', 'gui', 'hist', 'history', 'killbgscripts',
'ldir', 'less', 'lf', 'lk', 'll', 'load', 'load_ext', 'loadpy',
'logoff', 'logon', 'logstart', 'logstate', 'logstop', 'ls', 'lsmagic',
'lx', 'macro', 'magic', 'man', 'matplotlib', 'mkdir', 'more',
'mv', 'notebook', 'page', 'pastebin', 'pdb', 'pdef', 'pdoc',
'pfile', 'pinfo', 'pinfo2', 'pip', 'popd', 'pprint', 'precision',
'prun', 'psearch', 'psource', 'pushd', 'pwd', 'pycat', 'pylab',
'qtconsole', 'quickref', 'recall', 'rehashx', 'reload_ext', 'rep',
'rerun', 'reset', 'reset_selective', 'rm', 'rmdir', 'run', 'save',
'sc', 'set_env', 'store', 'sx', 'system', 'tb', 'time', 'timeit',
'unalias', 'unload_ext', 'who', 'who_ls', 'whos', 'xdel', 'xmode'
)
r_line_magics <- paste0('^%?(', paste(line_magics, collapse = '|'), ')($|\\s)')
# convert raw text/html and text/latex cells to raw ```{=format}` Markdown blocks
cell_raw <- function(x, fmt) {
if (length(fmt) != 1) return()
fmt <- switch(fmt, 'text/html' = 'html', 'text/latex' = 'latex')
if (length(fmt) == 0) return()
c(sprintf('```{=%s}', fmt), x, '```')
}
# adjust some cell magic names to knitr's engine names
adjust_lang <- function(x) {
if (x == 'R') return('r')
if (x == 'javascript') return('js')
# use raw HTML/LaTeX blocks for Pandoc's Markdown
if (tolower(x) %in% c('html', 'latex')) return(paste0('=', tolower(x)))
x
}
source('assets/jupyter.R')
